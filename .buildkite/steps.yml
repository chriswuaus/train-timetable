steps:
  - label: ":pipeline: Check if directory exists and clone repository"
    command: |
      DIRECTORY_PATH=${BUILDKITE_BUILD_CHECKOUT_PATH}
      REPO_URL=${BUILDKITE_REPO}
      
      if [ -d ${BUILDKITE_BUILD_CHECKOUT_PATH} ]; then
        echo "Directory ${BUILDKITE_BUILD_CHECKOUT_PATH} already exists."
      else
        echo "Directory ${BUILDKITE_BUILD_CHECKOUT_PATH} does not exist. Cloning repository..."
        git clone ${BUILDKITE_REPO} ${BUILDKITE_BUILD_CHECKOUT_PATH}
        cd ${BUILDKITE_BUILD_CHECKOUT_PATH}
        LATEST_COMMIT=$(git rev-parse HEAD)  # Get the latest commit hash
        git checkout "$LATEST_COMMIT"
      fi
    agents:
      queue: "default-queue"


  - label: ":pipeline: Check for changes in folder"
    command: |
      if [ ! -d "$FOLDER" ]; then
        echo "Error: $FOLDER does not exist or is not a directory."
        exit 1
      fi

      # Check for changes in the 'tests' folder
      if ! git diff --quiet HEAD~1 HEAD -- "tests"; then
        echo "Changes detected in tests:"
        # Print the list of changed files
        git diff --name-only HEAD~1 HEAD -- "tests"
        # Optionally, print the diff content for each changed file
        # for file in $(git diff --name-only HEAD~1 HEAD -- "tests"); do
        #   echo "------ $file ------"
        #   git show HEAD:$file
        #   echo ""
        # done
        # Exit with error to prevent further execution if needed
        exit 1
      else
        echo "No changes in tests"
        exit 0
      fi

  - label: ":pipeline: Echo provided environment variable"
    command: |
      if [ -z "$ENV" ]; then
        echo "Error: ENV is not provided."
        exit 1
      else
        echo "The value of ENV is: $MY_VARIABLE"
      fi
    env:
      MY_VARIABLE: "${MY_VARIABLE}"
