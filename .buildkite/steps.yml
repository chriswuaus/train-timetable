steps:
  - label: ":pipeline: Check if directory exists and clone repository"
    command: |
      DIRECTORY_PATH=${BUILDKITE_BUILD_CHECKOUT_PATH}
      REPO_URL=${BUILDKITE_REPO}
      
      if [ -d ${BUILDKITE_BUILD_CHECKOUT_PATH} ]; then
        echo "Directory ${BUILDKITE_BUILD_CHECKOUT_PATH} already exists."
      else
        echo "Directory ${BUILDKITE_BUILD_CHECKOUT_PATH} does not exist. Cloning repository..."
        git clone ${BUILDKITE_REPO} ${BUILDKITE_BUILD_CHECKOUT_PATH}
        cd ${BUILDKITE_BUILD_CHECKOUT_PATH}
        LATEST_COMMIT=$(git rev-parse HEAD)  # Get the latest commit hash
        git checkout "$LATEST_COMMIT"
      fi
    agents:
      queue: "default-queue"


  - label: ":pipeline: Check for changes in folder"
    command: |
      FOLDER="tests"
      if [ ! -d "tests" ]; then
        echo "Error: tests does not exist or is not a directory."
        exit 1
      fi

      if git diff --quiet HEAD~1 HEAD -- "tests"; then
        echo "No changes in tests"
        exit 0
      else
        echo "Changes detected in tests"
        # List all files changed within the folder between HEAD~1 and HEAD
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- "tests")
        # Loop through each changed file and print its content
        for file in $(git diff --name-only HEAD~1 HEAD -- "tests"); do
          echo "Changed file: $file"
          echo "-----------------"
          cat "$file"  # Print the content of the changed file
          echo ""
        done
      fi

  - label: ":pipeline: Echo provided environment variable"
    command: |
      if [ -z "$ENV" ]; then
        echo "Error: ENV is not provided."
        exit 1
      else
        echo "The value of ENV is: $MY_VARIABLE"
      fi
    env:
      MY_VARIABLE: "${MY_VARIABLE}"
